buildscript {
    version "3.3.2-SNAPSHOT"
    group "au.org.ala"
    description "Fieldguide application"
}

plugins {
    id "groovy"
    id "org.grails.grails-web"
    id "org.grails.grails-gsp"
    id "application"
    id "war"
    id "maven-publish"
    id "com.gorylenko.gradle-git-properties" version "2.4.1"
}

springBoot {
    mainClass = "au.org.ala.fieldguide.Application"
}

buildProperties {
    inputs.property("info.app.build.date", new Date().format('yyyy-MM-dd HH:mm:ss'))
}

repositories {
    mavenLocal()
    maven { url "https://nexus.ala.org.au/content/groups/public/" }
    mavenCentral()
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    all {
        // exclude to fix PDF generation by org.grails.plugins:rendering:2.0.3
        exclude group: "xerces", module: "xercesImpl"
    }
}

dependencies {
    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation "org.grails:grails-core"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-tomcat"
    implementation "org.grails:grails-web-boot"
    implementation "org.grails:grails-logging"
    implementation "org.grails:grails-plugin-rest"
    implementation "org.grails:grails-plugin-databinding"
    implementation "org.grails:grails-plugin-i18n"
    implementation "org.grails:grails-plugin-services"
    implementation "org.grails:grails-plugin-url-mappings"
    implementation "org.grails:grails-plugin-interceptors"
    implementation "org.grails.plugins:cache"
    implementation "org.grails.plugins:async"
    implementation "org.grails.plugins:scaffolding"
    implementation "org.grails.plugins:events"
    implementation "org.grails.plugins:gsp"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"
    runtimeOnly "org.glassfish.web:el-impl:2.2.1-b05"
    runtimeOnly "javax.xml.bind:jaxb-api:2.3.1"
    testImplementation  "org.grails:grails-gorm-testing-support"
    testImplementation  "org.mockito:mockito-core"
    testImplementation  "org.grails:grails-web-testing-support"

    // external config
    implementation 'dk.glasius:external-config:3.1.1'

    // plugins needed at runtime but not for compilation
    implementation 'au.org.ala.plugins:openapi:1.3.0'

    implementation "commons-httpclient:commons-httpclient:3.1"
    implementation "commons-io:commons-io:2.10.0"

    // PDF
    implementation("org.xhtmlrenderer:core-renderer:R8") {
        exclude module: "bcprov-jdk14"
        exclude module: "bcmail-jdk14"
    }
    implementation("com.lowagie:itext:2.1.0") {
        exclude module: "bcprov-jdk14"
        exclude module: "bcmail-jdk14"
    }
    implementation('org.grails.plugins:rendering:2.0.3') {
        exclude module: "bcprov-jdk14"
        exclude module: "bcmail-jdk14"
    }

    // plugins for the compile step
    implementation 'org.grails.plugins:mail:3.0.0'

    implementation "org.grails.plugins:ala-auth:$alaSecurityLibsVersion"
    implementation "org.grails.plugins:ala-ws-security-plugin:$alaSecurityLibsVersion"
    implementation "org.grails.plugins:ala-ws-plugin:$alaSecurityLibsVersion"

    implementation 'org.grails.plugins:aws-sdk-s3:2.4.8'
}

bootRun {
    jvmArgs(
        '-Dspring.output.ansi.enabled=always',
        '-noverify',
        '-XX:TieredStopAtLevel=1',
        '-Xmx2048m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

publishing {
    repositories {
        maven {
            name 'Nexus'
            url "https://nexus.ala.org.au/content/repositories/${project.version.endsWith('-SNAPSHOT') ? 'snapshots' : 'releases'}"
            credentials {
                username = System.getenv('TRAVIS_DEPLOY_USERNAME')
                password = System.getenv('TRAVIS_DEPLOY_PASSWORD')
            }
        }
    }
    publications {
        mavenJar(MavenPublication) {
            artifact bootJar
        }
    }
}

bootWar {
    enabled = false
}

bootJar {
    enabled = true
    classifier = 'exec'
    launchScript()
}
